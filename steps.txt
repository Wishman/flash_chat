Section 15 - Flash Chat - Flutter x Firebase Cloud Firestore

1. L-158 & 160: add routes
1.1 create static id prop in each Screen
1.2 create route with key: ScreenName.id (no ScreenName() due to static id var!)
1.3 add Navigator.push() to welcome screen login & registration button (V1)
    or use .pushNamed() (V2)

2. L-161: Flutter Hero Animations
Task: create a transition animation between welcome_screen and registration_screen with lightning logo
2.1 in welcome_screen wrap Container with logo.png in Hero Widget with tag: 'logo'
2.2 in registration_screen, wrap Container in Hero Widget with tag 'logo'
-- enough for a basic animation, as position & size are different on second screen
2.3 same for login_screen

3. L-162: Custom Flutter Animations with the Animation Controller
3.1 in welcome_screen build Animation Controller:
    3.1 (a) add 'with SingleTickerProviderStateMixin' to class _WelcomeScreenState
    3.1 (b) create AnimationController var (NOT Animated Controller!)
    3.1 (c) add initState() and init AnimationController
    3.1 (d) add controller.forward() to initState to start animation
    3.1 (e) add controller.addListener to initState to be able to know whats going on in animation
    3.1 (f) change bgColor in Scaffold to red with an opacity that accepts controller.value
    3.1 (g) add empty setState in controller.addListener to get opacity animation
3.2 change Text in Animation to provide % progress:
    3.2(a) add upperBound: 100 to AnimationController
    3.2(b) comment out 3.1(f) and change bgColor back to white
    3.2(c) change 'FlashChat' Text to $controller.value.toInt()%
3.3 animate logo (and subsequently text) itself:
    3.3(a) change text back to Flash Chat
    3.3(b) replace size in logo with controller.value to animate logo
3.4 use deceleration curve
     3.4(a) create variable Animation animation;
     3.4(b) in initState() init animation to a CurvedAnimation (parent: an Animation controller, curve:what kind of curve
     3.4(c) set  upperBound = 1 (max possible value for curved animation!)
     3.4(d) replace controller.value with animation.value in height prop of image.asset and multiply by 100 to see reasonable values
3.5 use controller.reverse to go e.g. from large to small
    3.5(a) comment out controller.forward
    3.5(b) add controller.reverse(from: startingPoint )
3.6 use animation.addStatusListener for looping animations
    3.6(a) add addStatusListener
    3.6(b) if status is AnimationStatus.completed -> forward is finished, start reverse
    3.6(c) if status is AnimationStatus.dismissed -> reverse is finished, start forward
    3.6(d) outside addStatusListener, comment out reverse and uncomment forward for initial start
3.7 add dispose method and dispose of controller to free resources when screen is dismissed
3.8 add TWEEN animation
    3.8(a) comment out addStatusListener and curved animation
    3.8(b) assign animation var to ColorTween Animation: needs .animate be cast to animation var!
    3.8(c) change height prop in image.asset back to 60
    3.8(d) change bgcolor to animation.value to assign animation
3.9 final: keep the ColorTween - begin: blueGrey, end: white

4. L-164: Prepackaged Flutter Animations (animations as flutter packages)
4.1 import animated_text_kit
4.2 change Text() widget of FlashCard title to become a TypewriterAnimatedTextKit
4.3 add text: as prop and put FlashCard in List Brackets
4.4 change style prop to textStyle prop
4.5 optional: set isRepeatingAnimation: false, to avoid repeating animations

5. L-165: Refactoring Lesson:  clean up the code:
5.1 extract Padding for first button into separate stateless widget called RoundedButton, delete preexisting constr
5.2 add add final props: color colour, String title, Function onTapped()
5.3 add constructor with {}, onPressed is required
5.4 exchange hard-coded valued for color, title and onPressed with props (no ())
5.5 add attribs to RoundedButton call
5.6 create folder components, add file rounded_button.dart, move Roundedbutton there, import material.dart in rounded_button.dart and rounded_button.dart in welcome_screen.dart
5.7 replace Register button with new RoundedButton
5.8 refactor login screen with rounded button
5.9 refactor registration screen with rounded button
5.10 move Inputdecoration for Textfields for entering email and pwd from  registration & login  to constants
    5.10 (a) move first one to constant kTextfieldDecoration
    5.10 (b) use kTextFielddecoration in registration screen instead of cut out decoration
    5.10 (c) replace second textfield Decoration with const and copyWith hintext different
5.11 delete dark theme in main.dart
5.12 add textColor white in roundedbutton

6. L-168 & L-169: create Firebase Project on firebase.google.com and configure for Android & iOS
see OneNote

7. L-170: Firebase Flutter Packages Setup (iOS & Android)
7.1 add firebase_core, firebase_auth and cloud_firestore packages to pubspec
7.2 in terminal do a pod repo update for cocoa-pods with 'pod repo update' and 'sudo gem install cocoapods' to install

8. L-171: Registering Users with Firebase using FirebaseAuth
8.1 in registration_screen create props: email & pwd (both String)
8.2 assign typed jnfo in Textfield one to email
8.3 same for password, but with password
8.4 test by adding print statement to onTapped of Register Button
8.5 spiff up Textfields
    8.5(a) in registration_screen center align text (textalign prop)
    8.5(b) hide password
    8.5(c) change KeyBoardType for entering email to TextInputType.emailAddress
    8.5(d) copy keyBoard type, textalign and obscuretext to respective fields on login_screen
8.6 add registration logic to registration screen
    8.6(a) import firebase_auth package
    8.6(b) create new authentication instance inside state class
    8.6(c) in onTapped() of Registration Button, create new User in Firebase (returns Future)
8.7 in chat_screen:
    8.7(a) import auth package
    8.7(b) create private auth instance
    8.7(c) create method getCurrentUser()
    8.7(d) create new FirebaseUser prop
    8.7(e) assign user to FirebaseUser
    8.7(f) wrap inside try/catch
    8.7(g) in initState() trigger getCurrentUser method to ensure registered user




